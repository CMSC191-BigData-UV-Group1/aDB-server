{"version":3,"sources":["../../../src/api/parser/parser.js"],"names":["log","require","Parser","sql","db","res","command","data","conditions","replace","regex","SELECT_STATEMENT","match","SELECT","COLUMNS","Error","requestedColumns","split","map","e","trim","FROM","TABLES","requestedTables","forEach","tables","table","col","name","i","count","filter","length","WHERE","cond","column","temp","substring","INSERT_STATEMENT","INSERT","TABLE","FORMAL_VALUES","VALUES","ACTUAL_VALUES","processSELECT","processINSERT","columns","Object","keys","push"],"mappings":"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","file":"parser.js","sourcesContent":["'use strict';\n\nconst log = require('debug')('parser')\n\nimport _ from 'lodash';\n\n// Tables\nimport COURSE         from './../../tables/COURSE';\nimport COURSEOFFERING from './../../tables/COURSEOFFERING';\nimport STUDCOURSE     from './../../tables/STUDCOURSE';\nimport STUDENT        from './../../tables/STUDENT';\nimport STUDENTHISTORY from './../../tables/STUDENTHISTORY';\n\n// Enums\n// import SemOffered     from './../../enums/SemOffered';\n// import Semester       from './../../enums/Semester';\n\n\nexport default class Parser {\n  static get regex() {\n    return {\n      SELECT_STATEMENT: /^\\s*SELECT\\s+/i,\n      INSERT_STATEMENT: /^\\s*INSERT\\s+INTO\\s+/i,\n      SELECT: {\n        COLUMNS: /(\\*\\s+)|((\\w+\\s*)(,\\s*\\w+\\s*)*)/,\n        FROM: /^FROM\\s+/i,\n        TABLES: /(\\w+\\s*)(,\\s*\\w+\\s*)*/,\n        WHERE: /^WHERE\\s+\\w+\\s*=\\s*((\\w+)|(\\'.*\\'))\\s*;/i\n      },\n      INSERT: {\n        TABLE: /\\w+\\s+/,\n        FORMAL_VALUES: /\\(\\s*(\\w+\\s*)(,\\s*\\w+)*\\s*\\)\\s+/,\n        VALUES: /^VALUES\\s+/i,\n        ACTUAL_VALUES: /\\(\\s*((\\'.*\\')|(?!,.+))\\s*(,\\s*(\\'.*\\')|(?!,.+))*\\s*\\)\\s*;$/\n      }\n    };\n  }\n\n  static get tables() {\n    return {\n      'COURSE': COURSE,\n      'COURSEOFFERING': COURSEOFFERING,\n      'STUDCOURSE': STUDCOURSE,\n      'STUDENT': STUDENT,\n      'STUDENTHISTORY': STUDENTHISTORY\n    };\n  }\n\n  static get columns() {\n    let columns = [];\n\n    for (let table of Object.keys(Parser.tables)) {\n      for (let column of Parser.tables[table]['columns']) {\n        columns.push(column['name']);\n      }\n    }\n\n    return columns;\n  }\n\n  /**\n   * Parse the SELECT statement and check for syntax errors\n   * @param {String} sql - sql command to parse\n   * @returns {Object} res - Object that contains the important results of the parser\n   * @throws {*}\n   */\n  static processSELECT(sql, db) {\n    /**\n     * res object will contain these keys:\n     *\n     * data - Object that contains key-value pairs of column-table\n     * conditions - the conditions in the WHERE statement (if there is)\n     */\n    let res = {\n      command: 'select',\n      data: {},\n      conditions: {}\n    };\n\n    // Removed processed regex\n    sql = sql.replace(Parser.regex.SELECT_STATEMENT, '');\n\n    // Check for syntax error\n    if (!sql.match(Parser.regex.SELECT.COLUMNS)) {\n      throw new Error(`Syntax error near '${sql}'`);\n    }\n\n    // Parse the columns\n    let requestedColumns = sql.match(Parser.regex.SELECT.COLUMNS)[0].split(',');\n    requestedColumns = requestedColumns.map(e => e.trim());\n\n    // Removed processed regex\n    sql = sql.replace(Parser.regex.SELECT.COLUMNS, '');\n\n    // Check for syntax error\n    if (!sql.match(Parser.regex.SELECT.FROM)) {\n      throw new Error(`Syntax error near '${sql}'`);\n    }\n\n    // Removed processed regex\n    sql = sql.replace(Parser.regex.SELECT.FROM, '');\n\n    // Check for syntax error\n    if (!sql.match(Parser.regex.SELECT.TABLES)) {\n      throw new Error(`Syntax error near '${sql}'`);\n    }\n\n    // Parse the tables\n    let requestedTables = sql.match(Parser.regex.SELECT.TABLES)[0].split(',');\n    requestedTables = requestedTables.map(e => e.trim());\n\n    // If \"*\" is selected, add all the columns of all the tables to res.data\n    if (requestedColumns[0] === '*') {\n      requestedTables.forEach(table => {\n        Parser.tables[table]['columns'].forEach(col => {\n          res.data[col.name] = table;\n        });\n      });\n    }\n    else {\n      for (let i = 0; i < requestedColumns.length; i++) {\n        let col = requestedColumns[i];\n\n        let count = 0;\n        requestedTables.forEach(table => {\n          Parser.tables[table]['columns'].forEach(e => {\n            if (e['name'] == col)\n              res.data[col] = table;\n          })\n          count += Parser.tables[table]['columns'].filter(e => e['name'] === col).length;\n        });\n\n        // Checks for ambiguous columns (if no aliasing)\n        if (count > 1) {\n          throw new Error(`Column '${col}' in field list is ambiguous`);\n        }\n      }\n    }\n\n    // Removed processed regex\n    sql = sql.replace(Parser.regex.SELECT.TABLES, '');\n\n    // Check for syntax error\n    if (!sql.match(Parser.regex.SELECT.WHERE)) {\n      log(sql)\n      throw new Error(`Syntax error near '${sql}'`);\n    }\n\n    // Parse conditions\n    let conditions = sql.match(Parser.regex.SELECT.WHERE)[0];\n\n    // Check for syntax error\n    if (!sql.match(Parser.regex.SELECT.WHERE)) {\n      throw new Error(`Syntax error near '${sql}'`);\n    }\n\n    let cond = sql.replace(/^WHERE\\s+/, '');\n    let column = cond.split('=')[0].trim();\n    res.conditions[requestedTables[0]] = {};\n    let temp = cond.split('=')[1].trim();\n    res.conditions[requestedTables[0]][column] = temp.substring(0, temp.length-1);\n\n    return res;\n  }\n\n  /**\n   * Parse the INSERT statement and check for syntax errors\n   * @param {String} sql - sql command to parse\n   * @returns {Object} res - Object that contains the important results of the parser\n   * @throws {*}\n   */\n  static processINSERT(sql, db) {\n    /**\n     * res object will contain these keys:\n     *\n     * table - the table where the row will be inserted\n     * formalValues - the columns of the table that the data will be inserted\n     * actualValues - the actual values that corresponds to each columns in the formalValues\n     */\n    let res = {\n      command: 'insert'\n    };\n\n    // Remove processed regex\n    sql = sql.replace(Parser.regex.INSERT_STATEMENT, '');\n\n    // Check for syntax error\n    if (!sql.match(Parser.regex.INSERT.TABLE)) {\n      throw new Error(`Syntax error near '${sql}'`);\n    }\n\n    // Parse the table\n    res['table'] = sql.match(Parser.regex.INSERT.TABLE)[0].trim();\n\n    // Remove processed regex\n    sql = sql.replace(Parser.regex.INSERT.TABLE, '');\n\n    // Parse the formal values\n    res['formalValues'] = sql.match(Parser.regex.INSERT.FORMAL_VALUES)[0].trim().replace(/\\(|\\)/g, '');\n    res['formalValues'] = res['formalValues'].split(',').map(e => e.trim());\n\n    // Remove processed regex\n    sql = sql.replace(Parser.regex.INSERT.FORMAL_VALUES, '');\n\n    // Check for syntax error\n    if (!sql.match(Parser.regex.INSERT.VALUES)) {\n      throw new Error(`Syntax error near '${sql}'`);\n    }\n\n    // Remove processed regex\n    sql = sql.replace(Parser.regex.INSERT.VALUES, '');\n\n    // Check for syntax error\n    if (!sql.match(Parser.regex.INSERT.ACTUAL_VALUES)) {\n      throw new Error(`Syntax error near '${sql}'`);\n    }\n\n    // Parse the actual values\n    res['actualValues'] = sql.match(Parser.regex.INSERT.ACTUAL_VALUES)[0].trim().replace(/\\(|\\)|;/g, '');\n    res['actualValues'] = res['actualValues'].split(',').map(e => e.trim());\n\n    // Remove processed regex\n    sql = sql.replace(Parser.regex.INSERT.ACTUAL_VALUES, '');\n\n    if (res['formalValues'].length !== res['actualValues'].length) {\n      throw new Error(`Length of formal values and actual values are not the same. Expected ${res['formalValues'].length}, got ${res['actualValues'].length}.`);\n    }\n\n    return res;\n  }\n\n  /**\n   * Check grammar, and other checkables, build a query tree\n   * @param {String} sql - sql command to parse\n   * @returns {*}\n   * @throws {*}\n   */\n  static parse(sql, db) {\n    // Check if matched with SELECT statement\n    if (sql.match(Parser.regex.SELECT_STATEMENT)) {\n      return Parser.processSELECT(sql, db);\n    }\n\n    // Check if matched with INSERT statement\n    if (sql.match(Parser.regex.INSERT_STATEMENT)) {\n      return Parser.processINSERT(sql, db);\n    }\n\n    throw new Error('Syntax Error. Please use either SELECT or INSERT statements only.')\n  }\n}\n"]}