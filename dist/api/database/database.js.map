{"version":3,"sources":["../../../src/api/database/database.js"],"names":["log","require","DatabaseType","options","Error","name","location","_options","tables","schema","normalizedName","toLowerCase","get","TableSchema","default","attach","set","keys","map","tb","inspect","parsed","values","tableAlias","reduce","r","tableName","table","err","find","t","found","Promise","all","upperCasedKey","toUpperCase","filter","projection","data","v","concat","sameKeys","columns","slice","intersection","grouped","groupBy","k","join","merged","pair","conditions","conformFieldFunction","key","eq","comparisonFunction","conforms","filtered","dbPath","existsSync","outputFileSync","JSON","stringify","createNotExist","create"],"mappings":"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","file":"database.js","sourcesContent":["\n'use strict';\n\nconst log = require('debug')('database');\n\nimport _ from 'lodash';\nimport $ from 'object-path';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport globber from 'require-glob';``\nimport { PATH_DATA_ROOT, DB_PREFIX } from './database.constants';\n\nexport default class DatabaseType {\n  constructor(options) {\n    if (!options) throw new Error(`Options required`);\n    if (!options.name) throw new Error(`Name required`);\n    if (!options.location) throw new Error(`Location required`);\n\n    this._options = {\n      name:     options.name,\n      location: options.location,\n      tables:   { }\n    }\n\n    // Add tables\n    // if (options.tables && Array.isArray(options.tables))\n    //   options.tables.map(t => this.table(t.name, t));\n  }\n\n  get name() {\n    return $.get(this, '_options.name');\n  }\n\n  get location() {\n    return $.get(this, '_options.location');\n  }\n\n  get tables() {\n    return $.get(this, '_options.tables');\n  }\n\n  /**\n   * Get / Create a table model\n   *\n   * @param {String} name\n   * @param {Schema} [schema]\n   */\n  table(name, schema) {\n    if (!name) throw new Error(`Table name required`);\n\n    const normalizedName = name.toLowerCase();\n\n    // Getter\n    if (!schema) {\n      // log(`============ GET TABLE ============`)\n      // log(`Name   `, name)\n      return $.get(this, '_options.tables.' + normalizedName);\n    }\n\n    // log(`============ SET TABLE ============`)\n    // log(`Name     `, name)\n    // log(`Schema   `, schema)\n\n    // Setter\n    if (this.tables[normalizedName]) throw new Error(`Table ${name} already exists in DB '${this.name}'`);\n\n    const TableSchema = require('../database-table').default;\n\n    // Check schema\n    if (!(schema instanceof TableSchema)) throw new Error(`Invalid schema '`, schema, `'`);\n\n    // Attach db\n    schema.attach(this);\n\n    // Add to map of tables\n    $.set(this, '_options.tables.' + normalizedName, schema);\n\n    // return table instance\n    return this.tables[normalizedName];\n  }\n\n  inspect() {\n    log(`================================== DB ==================================`)\n    log(`Name,      `, this.name)\n    log(`Location,  `, this.location)\n    // log(`Options   `, this._options)\n    log(`------------------------ TABLES ------------------------`)\n    _.keys(this.tables).map(tb => this.tables[tb].inspect())\n  }\n\n  /**\n   * Create a database connection\n   *\n   * @param {*} options\n   */\n  static create(options) {\n    if (!options) throw new Error(`Options required`);\n    if (!options.name) throw new Error(`DB Name required`);\n\n    // normalize name\n    const normalizedName = options.name.toLowerCase();\n\n    // data path\n    const dbPath = path.join(PATH_DATA_ROOT, DB_PREFIX + normalizedName);\n\n    // Check exist / validity\n    if (fs.existsSync(dbPath))\n      throw new Error(`DB with same name exists '${options.name}'`);\n\n    // Write db metadata\n    fs.outputFileSync(path.join(dbPath, 'meta.json'), JSON.stringify({\n      name: options.name\n    }, null, 2));\n\n    // Create DB instance\n    return new this({\n      name: normalizedName,\n      location: dbPath\n    })\n  }\n\n  /**\n   * Open a database connection\n   *\n   * @param {String}  name\n   * @param {Object}  options\n   * @param {Boolean} options.createNotExist\n   */\n  static open(name, options) {\n    if (!name) throw new Error(`DB Name required`);\n\n    // normalize name\n    const normalizedName = name.toLowerCase();\n\n    // data path\n    const dbPath = path.join(PATH_DATA_ROOT, DB_PREFIX + normalizedName);\n\n    if (!fs.existsSync(dbPath)) {\n      // If !exist, create new\n      if (options && options.createNotExist)\n        return this.create({ name })\n\n      throw new Error(`Db not found '${name}'`)\n    }\n\n    // Find tables\n    // const globbedTables = globber.sync([path.join(dbPath + '/tb-*/meta.json')]);\n\n    // log(`globbedTables `, globbedTables);\n\n    // const TableSchema = require('../database-table').default;\n\n    // Create TableTypes\n    // const tables = _.reduce(globbedTables, (r, meta, path) => r.concat(new TableSchema(meta)), [])\n\n    // Create DB instance\n    return new this({\n      name: normalizedName,\n      location: dbPath,\n      // tables\n    })\n  }\n\n  async select(parsed) {\n\n    log(`=========== SELECT =========`);\n    log(`DB    `, this.name);\n    log(`Parsed `, parsed);\n\n    const TableSchema = require('../database-table').default\n\n    // Load Tables\n    const tables = _.values(parsed.tableAlias)\n      .reduce((r, tableName) => ({ ...r, [tableName]: this.table(tableName) }), {})\n\n    // log(`tables `, tables);\n\n    const err = _.keys(tables).find(t => !(tables[t] instanceof TableSchema))\n\n    if (err) throw new Error(`Invalid Table `, err)\n\n    const found = {};\n\n    // Find all in every table\n    await Promise.all(_.keys(tables).map(async tableName => {\n      const upperCasedKey = tableName.toUpperCase();\n      const filter        = { } //parsed.conditions[upperCasedKey] || {}\n      const projection    = _.keys(parsed.data)\n      found[tableName] = await tables[tableName].find(filter, projection);\n    }))\n\n    log(found)\n\n    // Merge\n    const all = _.values(found).reduce((r, v) => r.concat(v), []);\n    log(`all `, all);\n\n    let sameKeys = _.values(tables).map(t => _.keys(t.columns))\n    sameKeys = sameKeys.slice(1).reduce((r, v) => _.intersection(r, v), sameKeys[0]);\n    log(`SameKeys `, sameKeys);\n\n    const grouped = _.groupBy(all, v => sameKeys.map(k => v[k]).join('-'))\n    log(`grouped`, grouped);\n\n    const merged = _.values(grouped).map(pair => pair.reduce((r, v) => ({ ...r, ...v }), {}))\n    log(`Merged `, merged);\n\n    // Filter\n    const filter = _.values(parsed.conditions).reduce((r, v) => ({ ...r, ...v }), {})\n    log(`Filter `, filter)\n\n    const conformFieldFunction = (filter, key) => ({\n      [key.toLowerCase()]: v => _.eq(v, filter[key])\n    })\n\n    const comparisonFunction = _.conforms(_.keys(filter).reduce((r, key) => ({ ...r, ... conformFieldFunction(filter, key)  }), {}))\n\n    log(`comparisonFunction `, comparisonFunction);\n\n    // Filter\n    const filtered = _.filter(merged, comparisonFunction);\n\n    log(`Filtered `, filtered)\n\n    return filtered\n  }\n}\n"]}