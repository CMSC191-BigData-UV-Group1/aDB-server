{"version":3,"sources":["../../../src/api/database-table/field-definition.js"],"names":["log","require","TYPE_VARCHAR","TYPE_INTEGER","TYPE_TIME","TYPE_DATE","FieldDefinition","path","options","Error","_options","type","validators","compact","isArray","validate","setters","set","value","reverse","reduce","res","fn","validator","find","val","message","replace","get","Array","required","push","isNil","min","toUpperCase","length","max","enum","normalizedEnum","map","i","toLowerCase","indexOf","join","toString","toInteger"],"mappings":"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","file":"field-definition.js","sourcesContent":["\n'use strict';\n\nconst log = require('debug')('database-field-definition');\n\nimport _ from 'lodash';\nimport $ from 'object-path';\n\nexport const TYPE_VARCHAR = 'VARCHAR';\nexport const TYPE_INTEGER = 'INTEGER';\nexport const TYPE_TIME = 'TIME';\nexport const TYPE_DATE = 'DATE';\n\nexport default class FieldDefinition {\n  constructor(path, options) {\n    if (!path) throw new Error(`Path required`);\n    if (!options) throw new Error(`Options required`);\n\n    this._options = {\n      path,\n      type: options.type,\n      validators: _.compact(_.isArray(options.validate) ? options.validate : [ options.validate ]),\n      setters: _.compact([ options.set ])\n    }\n  }\n\n  static validatorsFor(path, options) {\n    if (!options) return []\n\n    const validators = Array.isArray(options.validate)\n      ? options.validate\n      : _.compact([ options.validate ])\n\n    // Required validators\n    if (options.required) {\n      validators.push({\n        validator(val) {\n          return !_.isNil(val)\n        },\n        message: `${path} required`\n      })\n    }\n\n    // Minimum validators\n    if (options.min) {\n      validators.push({\n        validator(val) {\n          switch(options.type.toUpperCase())  {\n            case TYPE_VARCHAR: return val.length >= options.min;\n            case TYPE_INTEGER: return val >= options.min;\n            default: true\n          }\n        },\n        message: `Minimin length of ${options.min}`\n      })\n    }\n\n    // Max validators\n    if (options.max) {\n      validators.push({\n        validator(val) {\n          switch(options.type.toUpperCase())  {\n            case TYPE_VARCHAR: return val.length <= options.min;\n            case TYPE_INTEGER: return val <= options.min;\n            default: true\n          }\n        },\n        message: `Maximum length of ${options.max}`\n      })\n    }\n\n    // Enum validators\n    if (options.enum) {\n      const normalizedEnum = options.enum.map(i => i.toLowerCase());\n      validators.push({\n        validator(val) {\n          switch(options.type.toUpperCase())  {\n            case TYPE_VARCHAR: return normalizedEnum.indexOf(val.toLowerCase());\n            default: true\n          }\n        },\n        message: `Can only have ff values: ${options.enum.join(', ')}`\n      })\n    }\n  }\n\n  static settersFor(options) {\n    if (!options) return []\n\n    const setters = [];\n\n    switch(options.type) {\n      case TYPE_VARCHAR:\n        setters.push(function(val) {\n          return _.toString(val)\n        })\n        break;\n\n      case TYPE_INTEGER:\n        setters.push(function(val) {\n          return _.toInteger(val)\n        })\n        break;\n\n      default:\n        throw new Error(`Invalid type '`, options.type, `'`)\n    }\n\n    return setters;\n  }\n\n  get setters() {\n    return $.get(this, '_options.setters');\n  }\n\n  get validators() {\n    return $.get(this, '_options.validators');\n  }\n\n  get path() {\n    return $.get(this, '_options.path');\n  }\n\n  get type() {\n    return $.get(this, '_options.type');\n  }\n\n  inspect() {\n    log(`-------------------- PATH --------------------`)\n    log(`Name,      `, this.path)\n    log(`Type,  `, this.type)\n    log(`Setters `, this.setters);\n    log(`Validators `, this.validators);\n  }\n\n  /**\n   * Run setters on value\n   * @param {*} value\n   */\n  transform(value) {\n    return _.reverse(this.setters).reduce((res, fn) => fn(res), value)\n  }\n\n  /**\n   * Run validators agains value\n   * @param {*} value\n   */\n  validate(value) {\n    // Tripped Validator\n    const validator = _.reverse(this.validators).find(val => !val.fn(value));\n\n    return validator && (validator.message || 'Validation Error').replace('{VALUE}', value)\n  }\n}\n"]}