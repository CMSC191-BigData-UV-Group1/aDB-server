{"version":3,"sources":["../../../src/api/database-table/database-table.js"],"names":["log","require","TableSchema","options","Error","name","columns","_options","isPlainObject","keys","map","column","s","location","col","inspect","definition","normalizedName","toLowerCase","get","fieldDef","set","database","attached","Database","default","dbPath","join","outputFileSync","JSON","stringify","schema","mappings","reduce","res","val","key","normalizedKey","trans","transform","error","validate","dataSetPath","toWrite","dataSet","existsSync","readJsonSync","push","outputJsonSync","filter","projection","pickBy","v","undefined","conformFieldFunction","eq","comparisonFunction","conforms","r","filtered","isEmpty","pick","i","k","parsed","formalValues","ind","actualValues"],"mappings":"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","file":"database-table.js","sourcesContent":["\n'use strict';\n\nconst log = require('debug')('database-table');\n\nimport _ from 'lodash';\nimport $ from 'object-path';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { TABLE_PREFIX } from './database-table.constants';\nimport FieldDefinition from './field-definition';\nexport default class TableSchema {\n  constructor(options) {\n    if (!options) throw new Error(`Options required`);\n    if (!options.name) throw new Error(`Name required`);\n    if (!options.columns) throw new Error(`Schema required`);\n\n    this._options = {\n      name:     options.name,\n      columns:   { },\n    }\n\n    // Add columns\n    if (_.isPlainObject(options.columns))\n      _.keys(options.columns).map(s => this.column(s, options.columns[s]));\n\n  }\n\n  get name() {\n    return $.get(this, '_options.name');\n  }\n\n  get location() {\n    return $.get(this, '_options.location');\n  }\n\n  get columns() {\n    return $.get(this, '_options.columns');\n  }\n\n  inspect() {\n\n    log(`Name,      `, this.name)\n    log(`Location,  `, this.location)\n    log(`Options   `, this._options)\n    log(`+++++++++++++++++ COLUMNS +++++++++++++++++`)\n\n    _.keys(this.columns).map(col => this.columns[col].inspect())\n  }\n\n  /**\n   *\n   * @param {string} name\n   * @param {object} [definition]\n   */\n  column(name, definition) {\n    if (!name) throw new Error(`Column name required`);\n\n    const normalizedName = name.toLowerCase();\n\n    // Getter\n    if (!definition) {\n      // log(`============ GET COLUMN ============`)\n      // log(`Name   `, name)\n      return $.get(this, '_options.columns.' + normalizedName);\n    }\n\n    // log(`============ SET COLUMN ============`)\n    // log(`Name       `, name)\n    // log(`Definition `, definition)\n\n    // Setter\n    if (this.columns[normalizedName]) throw new Error(`Column ${name} already exists in Table '${this.name}'`);\n\n    // create definition\n    const fieldDef = new FieldDefinition(name, definition);\n\n    // Add to map of tables\n    $.set(this, '_options.columns.' + normalizedName, fieldDef);\n\n    // return table instance\n    return this.columns[normalizedName];\n  }\n\n  attach(database) {\n    if (this._options.attached) throw new Error('Already attached');\n\n    if (!database) throw new Error(`DB instance required`);\n\n    const Database = require('../database').default;\n\n    if (!(database instanceof Database)) throw new Error(`Invalid DB instance '`, database,`'`);\n\n    const normalizedName = this.name.toLowerCase();\n\n    const dbPath = path.join(database.location, TABLE_PREFIX + normalizedName);\n\n    $.set(this, '_options.location', dbPath)\n\n    // log(`Attaching `, this.name, `to DB`, database.name)\n    // log(`dbPath @ `, dbPath)\n\n    // Write table metadata\n    fs.outputFileSync(path.join(dbPath, 'meta.json'), JSON.stringify({\n      database: database.name,\n      name: this.name,\n      schema: this.columns\n    }, null, 2));\n  }\n\n  validate(mappings) {\n    // Transform values\n    return _.reduce(mappings, (res, val, key) => {\n      const normalizedKey = key.toLowerCase();\n      // Not a registered column\n      if (!this.columns[normalizedKey]) return;\n\n      // Run setters\n      const trans = this.columns[normalizedKey].transform(val);\n\n      // Run validators\n      const error = this.columns[normalizedKey].validate(val);\n      if (error) throw new Error(error);\n\n      return {\n        ... res,\n        [normalizedKey]: trans\n      }\n    }, {})\n  }\n\n  static mapParsed(parsed) {\n    return parsed.formalValues.reduce((r, col, ind) => ({\n      ...r,\n      [col]: parsed.actualValues[ind]\n    }), {})\n  }\n\n  async insert(mappings) {\n\n    // Retrieve dataset to write into\n    const dataSetPath = path.join(this.location, 'ds-1.json');\n\n    log(`=========== INSERT =========`);\n    log(`Table    `, this.name);\n    log(`Mappings `, mappings);\n    log(`WritePath `, dataSetPath);\n\n    // Transform and validate\n    const toWrite = this.validate(mappings);\n\n    log(`ToWrite   `, toWrite);\n\n    // Load dataset\n    const dataSet = fs.existsSync(dataSetPath)\n      ? fs.readJsonSync(dataSetPath)\n      : []\n\n    log(`Start DataSet `, dataSet)\n\n    // Add new item\n    dataSet.push(toWrite);\n\n    log(`End DataSet `, dataSet)\n\n    // Save dataset\n    fs.outputJsonSync(dataSetPath, dataSet)\n  }\n\n  async find(filter, projection) {\n\n    // Retrieve dataset to read into\n    const dataSetPath = path.join(this.location, 'ds-1.json');\n\n    // clean filter\n    filter = _.pickBy(filter, v => v !== undefined)\n\n    log(`=========== FIND =========`);\n    log(`Table    `, this.name);\n    log(`Filter   `, filter);\n    log(`Projection `, dataSetPath);\n\n    // Load dataset\n    const dataSet = fs.existsSync(dataSetPath)\n      ? fs.readJsonSync(dataSetPath)\n      : []\n\n    const conformFieldFunction = (filter, key) => ({\n      [key.toLowerCase()]: v => _.eq(v, filter[key])\n    })\n\n    const comparisonFunction = _.conforms(_.keys(filter).reduce((r, key) => ({ ...r, ... conformFieldFunction(filter, key)  }), {}))\n\n    log(`comparisonFunction `, comparisonFunction);\n\n    // Filter\n    const filtered = _.filter(dataSet, comparisonFunction);\n\n    // Project\n    return _.isEmpty(projection)\n      ? filtered\n      : filtered.map(i => _.pick(i, projection.map(k => k.toLowerCase())))\n  }\n}\n"]}